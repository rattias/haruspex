// automatically generated by the FlatBuffers compiler, do not modify

package haruspex.common.event.flatbuf;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

@SuppressWarnings("unused")
public final class TagContext extends Table {
  public static TagContext getRootAsTagContext(ByteBuffer _bb) { return getRootAsTagContext(_bb, new TagContext()); }
  public static TagContext getRootAsTagContext(ByteBuffer _bb, TagContext obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public TagContext __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Tag tags(int j) { return tags(new Tag(), j); }
  public Tag tags(Tag obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tagsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createTagContext(FlatBufferBuilder builder,
      byte type,
      int tagsOffset) {
    builder.startObject(2);
    TagContext.addTags(builder, tagsOffset);
    TagContext.addType(builder, type);
    return TagContext.endTagContext(builder);
  }

  public static void startTagContext(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(1, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTagContext(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

